FROM nvcr.io/nvidia/l4t-jetpack:r36.4.0

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

RUN apt-get update

RUN apt-get install -y apt-utils && apt-get install -y curl gnupg2 && apt-get install -y lsb-release && apt-get clean all



# --- ROS2 Humble Installation
RUN locale  # check for UTF-8

RUN apt update && apt install -y locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

RUN echo "export LANG=en_US.UTF-8" >> /root/.bashrc

RUN locale  # verify settings

RUN apt install -y software-properties-common
RUN add-apt-repository universe
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt-get update && apt-get install -y git

RUN apt install -y ros-humble-desktop
# --- Humble has been installed


#install some tool
RUN apt install -y nano openssh-server 
#for ping hardware etc...
RUN apt-get install -y iputils-ping
#for ifconfig
RUN apt-get install -y net-tools
#for ifconfig
RUN apt-get install -y htop
RUN apt-get install -y build-essential


# --- gtsam ---
RUN apt install -y zip
RUN apt install -y libmetis-dev
RUN cd /tmp && git clone https://github.com/borglab/gtsam.git && cd gtsam && git checkout 4.2a9
RUN cd /tmp/gtsam && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DGTSAM_USE_SYSTEM_EIGEN=ON -DGTSAM_USE_SYSTEM_METIS=ON .. && make install -j$(($(nproc) - 2))
# --- end of gtsam


# --- PCL --- 
RUN apt install -y libpcap-dev
RUN apt install -y libusb-1.0-0-dev
RUN cd /tmp && git clone https://github.com/PointCloudLibrary/pcl.git && cd pcl && git checkout pcl-1.14.1
RUN cd /tmp/pcl && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr .. && make install -j$(($(nproc) - 2))
# --- end of PCL

# --- Serial lib ---
COPY ./pkgs/serial-foxy.zip /tmp
RUN bin/bash -c "cd /tmp && unzip serial-foxy.zip && source /opt/ros/humble/setup.bash && cd serial-foxy && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make install -j$(nproc)"

RUN apt update

# Install pip
RUN apt install -y python3-pip

RUN apt install -y libopencv-dev python3-opencv

# Install colcon
RUN apt install -y python3-colcon-common-extensions

# fix map tool
RUN apt install -y libfreeimage-dev

#install GDB
RUN apt install -y gdb

#install apriltag
RUN apt install -y ros-humble-apriltag-msgs
RUN cd /tmp && git clone https://github.com/AprilRobotics/apriltag.git && cd apriltag && git checkout 3806edf38ac4400153677e510c9f9dcb81f472c8 && cmake -B build -DCMAKE_BUILD_TYPE=Release && cmake --build build --target install

#install can stuff for scout
RUN apt install -y libasio-dev can-utils

#-----Semantic segmentation dependencies-----

#gst
RUN apt install -y libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio

#install torch 2.5 and torchvision 0.20 and cudnn 9
#see: https://forums.developer.nvidia.com/t/pytorch-and-torvision-version-issue-runtimeerror-operator-torchvision-nms-does-not-exist/312446
#see: https://developer.nvidia.com/cudnn-downloads?target_os=Linux&target_arch=aarch64-jetson&Compilation=Native&Distribution=Ubuntu&target_version=22.04&target_type=deb_local
RUN apt-get install -y python3-pip libopenblas-dev
#see: https://developer.nvidia.com/cusparselt-downloads?target_os=Linux&target_arch=aarch64-jetson&Compilation=Native&Distribution=Ubuntu&target_version=22.04&target_type=deb_network
RUN cd /tmp && wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/arm64/cuda-keyring_1.1-1_all.deb
RUN /bin/bash -c "cd /tmp && dpkg -i cuda-keyring_1.1-1_all.deb && apt-get update && apt-get -y install libcusparselt0 libcusparselt-dev"
RUN /bin/bash -c "cd /tmp && wget https://developer.download.nvidia.com/compute/cudnn/9.5.1/local_installers/cudnn-local-tegra-repo-ubuntu2204-9.5.1_1.0-1_arm64.deb"
RUN /bin/bash -c "cd /tmp && dpkg -i cudnn-local-tegra-repo-ubuntu2204-9.5.1_1.0-1_arm64.deb"
RUN /bin/bash -c "cd /tmp && cp /var/cudnn-local-tegra-repo-ubuntu2204-9.5.1/cudnn-*-keyring.gpg /usr/share/keyrings/"
RUN /bin/bash -c "cd /tmp && apt update && apt-get -y install cudnn"
RUN /bin/bash -c "cd /tmp && wget https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl && python3 -m pip install --upgrade pip; python3 -m pip install numpy==1.26.1; python3 -m pip install --no-cache torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl"
RUN /bin/bash -c "cd /tmp && git clone https://github.com/pytorch/vision.git && cd vision && git checkout v0.20.0 && python3 setup.py install"
RUN pip3 install pycuda

#-----we have deep learning-----

# intel realsense
RUN apt install -y sudo ros-humble-diagnostic-updater
RUN /bin/bash -c "cd /tmp && git clone https://github.com/IntelRealSense/librealsense.git && cd librealsense && git checkout e1688cc318457f7dd57abcdbedd3398062db3009"
COPY bash/libuvc_installation.bash /tmp/librealsense/scripts
RUN /bin/bash -c "cd /tmp/librealsense && chmod +x /tmp/librealsense/scripts/libuvc_installation.bash && ./scripts/libuvc_installation.bash"

WORKDIR /root

CMD ["bash"]
